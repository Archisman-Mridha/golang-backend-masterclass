// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user-operations.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
insert into users
    (username, hashedPassword, name, email)
    values ($1, $2, $3, $4)
        returning username, hashedpassword, name, email, createdat
`

type CreateUserParams struct {
	Username       string `json:"username"`
	Hashedpassword string `json:"hashedpassword"`
	Name           string `json:"name"`
	Email          string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Hashedpassword,
		arg.Name,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Hashedpassword,
		&i.Name,
		&i.Email,
		&i.Createdat,
	)
	return i, err
}

const getUserDetails = `-- name: GetUserDetails :one
select username, hashedpassword, name, email, createdat from users
    where username= $1
        limit 1
`

func (q *Queries) GetUserDetails(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserDetails, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Hashedpassword,
		&i.Name,
		&i.Email,
		&i.Createdat,
	)
	return i, err
}

const updateUserDetails = `-- name: UpdateUserDetails :one
update users
    set
        hashedPassword= COALESCE($1, hashedPassword),
        name= COALESCE($2, name),
        email= COALESCE($3, email)
    where username= $4
        returning username, hashedpassword, name, email, createdat
`

type UpdateUserDetailsParams struct {
	Hashedpassword string `json:"hashedpassword"`
	Name           string `json:"name"`
	Email          string `json:"email"`
	Username       string `json:"username"`
}

func (q *Queries) UpdateUserDetails(ctx context.Context, arg UpdateUserDetailsParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserDetails,
		arg.Hashedpassword,
		arg.Name,
		arg.Email,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Hashedpassword,
		&i.Name,
		&i.Email,
		&i.Createdat,
	)
	return i, err
}
