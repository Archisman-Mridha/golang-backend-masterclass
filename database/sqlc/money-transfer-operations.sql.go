// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: money-transfer-operations.sql

package database

import (
	"context"
)

const getMoneyTransferDetails = `-- name: GetMoneyTransferDetails :one
select id, from_account_id, to_account_id, amount, created_at from transfers
    where id= $1
        limit 1
`

func (q *Queries) GetMoneyTransferDetails(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getMoneyTransferDetails, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listMoneyTransfers = `-- name: ListMoneyTransfers :many
select id, from_account_id, to_account_id, amount, created_at from transfers
    where from_account_id= $3 or to_account_id= $4
        order by id
            limit $1 offset $2
`

type ListMoneyTransfersParams struct {
	Limit            int32 `json:"limit"`
	Offset           int32 `json:"offset"`
	SenderAmountID   int64 `json:"sender_amount_id"`
	ReceiverAmountID int64 `json:"receiver_amount_id"`
}

func (q *Queries) ListMoneyTransfers(ctx context.Context, arg ListMoneyTransfersParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listMoneyTransfers,
		arg.Limit,
		arg.Offset,
		arg.SenderAmountID,
		arg.ReceiverAmountID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transfer
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const transferMoney = `-- name: TransferMoney :one
insert into transfers
    (from_account_id, to_account_id, amount)
    values ($1, $2, $3)
        returning id, from_account_id, to_account_id, amount, created_at
`

type TransferMoneyParams struct {
	SenderAccountID   int64 `json:"sender_account_id"`
	ReceiverAccountID int64 `json:"receiver_account_id"`
	Amount            int64 `json:"amount"`
}

func (q *Queries) TransferMoney(ctx context.Context, arg TransferMoneyParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, transferMoney, arg.SenderAccountID, arg.ReceiverAccountID, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
